{"ast":null,"code":"var _jsxFileName = \"/home/gabriel/new_course_react/gerenciador-de-tarefas-com-react/src/listar/concluir-tarefa.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClipboardCheck } from '@fortawesome/free-solid-svg-icons';\n\nconst ConcluirTarefa = props => {\n  const [exibirModal, setExibirModal] = useState(false);\n\n  const handleAbrirMoral = event => {\n    event.preventDefault();\n    setExibirModal(true);\n  };\n\n  const handleFecharModal = () => setExibirModal(false);\n\n  const handleConcluirTarefa = event => {\n    event.preventDefault();\n    const tarefasDb = localStorage['tarefas'];\n    let tarefas = tarefasDb ? JSON.parse(tarefasDb) : [];\n    tarefas = tarefas.map(tarefa => {\n      if (tarefa.id === props.tarefa.id) {\n        tarefa.concluida = true;\n      }\n\n      return tarefa;\n    });\n    localStorage['tarefas'] = JSON.stringify(tarefas);\n    setExibirModal(false);\n    props.recarregarTarefas(true);\n  };\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: props.className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btn-sm\",\n    onClick: handleAbrirMoral,\n    \"data-testid\": \"btn-abrir-modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faClipboardCheck,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Modal, {\n    show: exibirModal,\n    onHide: handleFecharModal,\n    \"data-testid\": \"modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, \"Concluir tarefa\")), /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, \"Deseja realmente concluir a seguinte tarefa?\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }\n  }, props.tarefa.nome)), /*#__PURE__*/React.createElement(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    onClick: handleConcluirTarefa,\n    \"data-testid\": \"btn-concluir\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, \"Sim\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"light\",\n    onClick: handleFecharModal,\n    \"data-testid\": \"btn-fechar-modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"N\\xE3o\"))));\n};\n\nConcluirTarefa.propTypes = {\n  tarefa: PropTypes.object.isRequired,\n  recarregarTarefas: PropTypes.func.isRequired,\n  className: PropTypes.string\n};\nexport default ConcluirTarefa;","map":{"version":3,"sources":["/home/gabriel/new_course_react/gerenciador-de-tarefas-com-react/src/listar/concluir-tarefa.js"],"names":["React","useState","PropTypes","Modal","Button","FontAwesomeIcon","faClipboardCheck","ConcluirTarefa","props","exibirModal","setExibirModal","handleAbrirMoral","event","preventDefault","handleFecharModal","handleConcluirTarefa","tarefasDb","localStorage","tarefas","JSON","parse","map","tarefa","id","concluida","stringify","recarregarTarefas","className","nome","propTypes","object","isRequired","func","string"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Modal, Button } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faClipboardCheck } from '@fortawesome/free-solid-svg-icons'\n\nconst ConcluirTarefa = props => {\n  const [exibirModal, setExibirModal] = useState(false)\n\n  const handleAbrirMoral = (event) => {\n    event.preventDefault()\n    setExibirModal(true)\n  }\n\n  const handleFecharModal = () => setExibirModal(false)\n\n  const handleConcluirTarefa = (event) => {\n    event.preventDefault()\n    const tarefasDb = localStorage['tarefas']\n    let tarefas = tarefasDb ? JSON.parse(tarefasDb) : []\n    tarefas = tarefas.map(tarefa => {\n      if (tarefa.id === props.tarefa.id) {\n        tarefa.concluida = true\n      }\n      return tarefa\n    })\n    localStorage['tarefas'] = JSON.stringify(tarefas)\n    setExibirModal(false)\n    props.recarregarTarefas(true)\n  }\n\n  return (\n    <span className={props.className}>\n      <Button className='btn-sm' onClick={handleAbrirMoral}\n        data-testid='btn-abrir-modal'>\n          <FontAwesomeIcon icon={faClipboardCheck} />\n      </Button>\n      <Modal show={exibirModal} onHide={handleFecharModal}\n        data-testid='modal'>\n          <Modal.Header closeButton>\n            <Modal.Title>Concluir tarefa</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            Deseja realmente concluir a seguinte tarefa?\n            <br />\n              <strong>{props.tarefa.nome}</strong>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant ='primary' onClick={handleConcluirTarefa}\n              data-testid='btn-concluir'>\n                Sim\n            </Button>\n            <Button variant='light' onClick={handleFecharModal}\n              data-testid='btn-fechar-modal'>\n                NÃ£o\n              </Button>\n          </Modal.Footer>\n        </Modal>\n    </span>\n  )\n\n}\n\nConcluirTarefa.propTypes = {\n  tarefa: PropTypes.object.isRequired,\n  recarregarTarefas: PropTypes.func.isRequired,\n  className: PropTypes.string\n}\n\nexport default ConcluirTarefa"]},"metadata":{},"sourceType":"module"}