{"ast":null,"code":"var _jsxFileName = \"/home/gabriel/new_course_react/gerenciador-de-tarefas-com-react/src/atualizar/atualizar-tarefa.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Form, Jumbotron, Modal } from 'react-bootstrap';\nimport { navigate, A } from 'hookrouter';\n\nconst AtualizarTarefa = () => {\n  const [exibirModal, setExibirModal] = useState(false);\n  const [formValidado, setFormValidado] = useState(false);\n  const [tarefa, setTarefa] = useState('');\n  const [carregarTarefa, setCarregarTarefa] = useState(true);\n  useEffect(() => {\n    if (carregarTarefa) {\n      const tarefasDb = localStorage['tarefas'];\n      const tarefas = tarefasDb ? JSON.parse(tarefasDb) : [];\n      const tarefa = tarefas.filter(t => t.id === parseInt(props.id))[0];\n      setTarefa(tarefa.nome);\n      setCarregarTarefa(false);\n    }\n  }, [carregarTarefa]);\n\n  const voltar = event => {\n    event.preventDefault();\n    navigate('/');\n  };\n\n  const handleFecharModal = () => navigate('/');\n\n  const atualizar = event => {\n    event.preventDefault();\n    setFormValidado(true);\n\n    if (event.currentTarget.checkValidity() === true) {}\n  };\n\n  const handleTxtTarefa = event => setTarefa(event.target.value);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"Atualizar\"), /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: atualizar,\n    noValidate: true,\n    validated: formValidado,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }\n  }, \"Tarefa\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    placeholder: \"Digite a tarefa\",\n    minLength: \"5\",\n    maxLength: \"100\",\n    required: true,\n    \"data-testid\": \"txt-tarefa\",\n    value: tarefa,\n    onChange: handleTxtTarefa,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, \"A tarefa deve conter ao menos 5 caracteres\")), /*#__PURE__*/React.createElement(Form.Group, {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"success\",\n    type: \"submit\",\n    \"data-testid\": \"btn-atualizar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, \"Atualizar\"), \"\\xA0\", /*#__PURE__*/React.createElement(A, {\n    href: \"/\",\n    className: \"btn btn-light\",\n    onClick: voltar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }, \"Voltar\"))), /*#__PURE__*/React.createElement(Modal, {\n    show: exibirModal,\n    onHide: handleFecharModal,\n    \"data-testid\": \"modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, \"Sucesso\")), /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, \"Tarefa atualizada com sucesso!\"), /*#__PURE__*/React.createElement(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"success\",\n    onClick: handleFecharModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, \"Continuar\")))));\n};\n\nAtualizarTarefa.propTypes = {\n  id: PropTypes.number.isRequired\n};\nexport default AtualizarTarefa;","map":{"version":3,"sources":["/home/gabriel/new_course_react/gerenciador-de-tarefas-com-react/src/atualizar/atualizar-tarefa.js"],"names":["React","useState","useEffect","PropTypes","Button","Form","Jumbotron","Modal","navigate","A","AtualizarTarefa","exibirModal","setExibirModal","formValidado","setFormValidado","tarefa","setTarefa","carregarTarefa","setCarregarTarefa","tarefasDb","localStorage","tarefas","JSON","parse","filter","t","id","parseInt","props","nome","voltar","event","preventDefault","handleFecharModal","atualizar","currentTarget","checkValidity","handleTxtTarefa","target","value","propTypes","number","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, Form, Jumbotron, Modal } from 'react-bootstrap'\nimport { navigate, A } from 'hookrouter'\n\nconst AtualizarTarefa = () => {\n\n  const [exibirModal, setExibirModal] = useState(false)\n  const [formValidado, setFormValidado] = useState(false)\n  const [tarefa, setTarefa] = useState('')\n  const [carregarTarefa, setCarregarTarefa] = useState(true)\n\n  useEffect(() => {\n    if (carregarTarefa) {\n      const tarefasDb = localStorage['tarefas']\n      const tarefas = tarefasDb ? JSON.parse(tarefasDb) : []\n      const tarefa = tarefas.filter(\n        t => t.id === parseInt(props.id)\n      )[0]\n      setTarefa(tarefa.nome)\n      setCarregarTarefa(false)\n    }\n\n  }, [carregarTarefa])\n\n  const voltar = event => {\n    event.preventDefault()\n    navigate('/')\n  }\n\n  const handleFecharModal = () => navigate('/')\n\n  const atualizar = event => {\n    event.preventDefault()\n    setFormValidado(true)\n    if (event.currentTarget.checkValidity() === true) {\n\n    }\n  }\n\n  const handleTxtTarefa = event => setTarefa(event.target.value)\n\n    return (\n      <div>\n        <h3 className=\"text-center\">Atualizar</h3>\n        <Jumbotron>\n          <Form onSubmit={atualizar} noValidate validated={formValidado}>\n            <Form.Group>\n              <Form.Label>Tarefa</Form.Label>\n              <Form.Control\n                type='text'\n                placeholder='Digite a tarefa'\n                minLength='5'\n                maxLength='100'\n                required\n                data-testid='txt-tarefa'\n                value={tarefa}\n                onChange={handleTxtTarefa} />\n              <Form.Control.Feedback type='invalid'>\n                A tarefa deve conter ao menos 5 caracteres\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group className=\"text-center\">\n              <Button variant=\"success\" type=\"submit\" data-testid=\"btn-atualizar\">\n                Atualizar\n              </Button>\n              &nbsp;\n              <A href=\"/\" className=\"btn btn-light\" onClick={voltar}>\n                Voltar\n              </A>\n            </Form.Group>\n          </Form>\n          <Modal show={exibirModal} onHide={handleFecharModal} data-testid=\"modal\">\n            <Modal.Header closeButton>\n              <Modal.Title>Sucesso</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              Tarefa atualizada com sucesso!\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"success\" onClick={handleFecharModal}>\n                Continuar\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </Jumbotron>\n      </div>\n    )\n}\n\nAtualizarTarefa.propTypes = {\n  id: PropTypes.number.isRequired\n}\n\nexport default AtualizarTarefa;"]},"metadata":{},"sourceType":"module"}